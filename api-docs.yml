openapi: 3.0.0
servers:
  - url: http://localhost:3000/
info:
  title: Calendar API
  version: "1.0"
security:
  - ApiKeyAuth: []
paths:
  /v1/login:
    get:
      summary: Redirect to Google's OAuth 2.0 server
      description: Initiates the OAuth 2.0 authentication flow by redirecting the user to Google's OAuth 2.0 server.
      responses:
        '302':
          description: Redirects to Google OAuth server
        '400':
          description: Bad request, check if parameters are correct
        '500':
          description: Internal server error
  /oauth2callback:
    get:
      summary: OAuth 2.0 Callback Endpoint
      description: >
        Handles the callback from Google's OAuth 2.0 server. This endpoint exchanges
        the authorization code for access and refresh tokens with Google. After obtaining
        and storing the user's information, it redirects to an intermediate page which
        then can handle further user-specific redirection or actions.
      responses:
        '302':
          description: Found. Redirect to an intermediate success page.
          headers:
            Location:
              schema:
                type: string
                example: /auth-success.html?userId=12345
              description: Redirect location to the success page with the user ID as a query parameter.
        '400':
          description: Bad request, failed to exchange authorization code.
        '500':
          description: Internal server error, failed to process the request.

  /v1/{userId}/:
    post:
      summary: Create a new calendar for the user
      description: Creates a new calendar associated with the specified user within the application.
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the user for whom the calendar is being created.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the calendar.
                  example: 'Personal Calendar'
      responses:
        '201':
          description: Calendar successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message.
                    example: 'Calendar created successfully.'
        '400':
          description: Bad Request. User already has a calendar.
        '404':
          description: User not found for the given user ID.
        '500':
          description: Internal Server Error. Failed to create calendar.
  /v1/{userId}/calendars:
    post:
      summary: Inserts a new event into the user's calendar with the provided details. 
      description: If the user's calendar exists, it adds the event with the provided details. 
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the user whose calendar is being modified.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                summary:
                  type: string
                  description: A short summary of the event.
                location:
                  type: string
                  description: The location where the event will take place.
                description:
                  type: string
                  description: A detailed description of the event.
                start:
                  type: string
                  type: string
                  format: date-time
                  description: The start date and time of the event.
                end:
                  type: string
                  type: string
                  format: date-time
                  description: The end date and time of the event.
                timezone:
                  type: string
                  type: string
                  format: timezone
                  description: The timezone of the event.
                  
      responses:
        '201':
          description: Event added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message.
                    example: 'Event added successfully'
                  eventId:
                    type: integer
                    description: The ID of the added or updated event.
        '404':
          description: Calendar not found for the given user ID.
        '500':
          description: Failed to process request.
    get:
      summary: Retrieve events for a specific user's calendar
      description: Retrieves all events associated with the specified user's calendar.
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the user whose calendar events are being retrieved.
          schema:
            type: integer
      responses:
        '200':
          description: A list of calendar events successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    summary:
                      type: string
                      description: A brief summary of the event.
                    location:
                      type: string
                      description: The location of the event.
                    description:
                      type: string
                      description: A detailed description of the event.
                    startDateTime:
                      type: string
                      format: date-time
                      description: The start date and time of the event.
                    endDateTime:
                      type: string
                      format: date-time
                      description: The end date and time of the event.
        '404':
          description: Calendar not found for the given user ID, or no events found for the given calendar.
        '500':
          description: Internal Server Error. Failed to retrieve events.

  /v1/{userId}/calendars/{eventId}:
    patch:
      summary: Updates an existing event in the user's calendar
      description: If the user's calendar exists, it updates the event with the provided details. 
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the user whose calendar is being modified.
          schema:
            type: integer
        - in: path
          name: eventId
          required: true
          description: The ID of the event that is being updated.
          schema:
            type: integer

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                summary:
                  type: string
                  description: A short summary of the event.
                location:
                  type: string
                  description: The location where the event will take place.
                description:
                  type: string
                  description: A detailed description of the event.
                start:
                  type: string
                  type: string
                  format: date-time
                  description: The start date and time of the event.
                end:
                  type: string
                  type: string
                  format: date-time
                  description: The end date and time of the event.
                timezone:
                  type: string
                  type: string
                  format: timezone
                  description: The timezone of the event.
      responses:
        '200':
          description: Event updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Event updated successfully'
                  eventId:
                    type: integer
                    description: The ID of the updated event.
        '404':
          description: Calendar not found for the given user ID or event not found in the user's calendar.
        '500':
          description: Failed to process request.
    delete:
      summary: delete an existing event in the user's calendar
      description: If the user's calendar exists, it deletes the event with the provided details. 
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the user whose calendar is being modified.
          schema:
            type: integer
        - in: path
          name: eventId
          required: true
          description: The ID of the event that is being updated.
          schema:
            type: integer

      responses:
        '200':
          description: Event deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Event updated successfully'
                  eventId:
                    type: integer
                    description: The ID of the updated event.
        '404':
          description: Calendar not found for the given user ID or event not found in the user's calendar.
        '500':
          description: Failed to process request.


components:
  securitySchemes:
    ApiKeyAuth:  
      type: apiKey
      in: header
      name: x-api-key  # This should match the header name used in your requests

